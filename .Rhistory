library(washr)
setup_rawdata()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/SDG Household Level Survey (Malawi CJF).csv")
# (Optional) Read and clean the codebook if needed (commented out for now)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") %>%
#   clean_names()
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check the data for non-UTF-8 characters before conversion
check_utf8(data_in)
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_submitted' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_submitted = mdy(date_submitted))
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_submitted = format(date_submitted, "%d/%m/%Y"))
# Assign data to a variable
sdghhsurveymw <- data_in
# Export Data ------------------------------------------------------------------
usethis::use_data(sdghhsurveymw, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(sdghhsurveymw,
here::here("inst", "extdata", paste0("sdghhsurveymw", ".csv")))
openxlsx::write.xlsx(sdghhsurveymw,
here::here("inst", "extdata", paste0("sdghhsurveymw",
".xlsx")))
# Display a chart for the boreholes drilled per year ---------------------------
# Convert 'date_of_drilling' to Date format and extract the year
sdghhsurveymw$year <- year(mdy(sdghhsurveymw$date_submitted))
# Count number of boreholes drilled per year
#boreholes_per_year <- drillingdata %>%
#  filter(!is.na(year)) %>%
#  group_by(year) %>%
#  summarise(boreholes_drilled = n())
# Create the bar plot
#ggplot(boreholes_per_year, aes(x = factor(year), y = boreholes_drilled)) +
#  geom_col(fill = "red") +
#  theme_minimal() +
#  labs(
#    title = "Boreholes Drilled Per Year",
#    x = "Year",
#    y = "Number of Boreholes Drilled"
#  )
setup_dictionary()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/SDG Household Level Survey (Malawi CJF).csv")
# (Optional) Read and clean the codebook if needed (commented out for now)
# codebook <- readxl::read_excel("data-raw/codebook.xlsx") %>%
#   clean_names()
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check the data for non-UTF-8 characters before conversion
check_utf8(data_in)
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_submitted' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_submitted = mdy(date_submitted))
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_submitted = format(date_submitted, "%d/%m/%Y"))
# Assign data to a variable
sdghhsurveymw <- data_in
# Export Data ------------------------------------------------------------------
usethis::use_data(sdghhsurveymw, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(sdghhsurveymw,
here::here("inst", "extdata", paste0("sdghhsurveymw", ".csv")))
openxlsx::write.xlsx(sdghhsurveymw,
here::here("inst", "extdata", paste0("sdghhsurveymw",
".xlsx")))
# Display a chart for the boreholes drilled per year ---------------------------
# Convert 'date_of_drilling' to Date format and extract the year
sdghhsurveymw$year <- year(mdy(sdghhsurveymw$date_submitted))
# Count number of boreholes drilled per year
#boreholes_per_year <- drillingdata %>%
#  filter(!is.na(year)) %>%
#  group_by(year) %>%
#  summarise(boreholes_drilled = n())
# Create the bar plot
#ggplot(boreholes_per_year, aes(x = factor(year), y = boreholes_drilled)) +
#  geom_col(fill = "red") +
#  theme_minimal() +
#  labs(
#    title = "Boreholes Drilled Per Year",
#    x = "Year",
#    y = "Number of Boreholes Drilled"
#  )
setup_dictionary()
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/SDG Household Level Survey (Malawi CJF).csv")
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check the data for non-UTF-8 characters before conversion
check_utf8(data_in)
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_submitted' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_submitted = mdy(date_submitted))
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_submitted = format(date_submitted, "%d/%m/%Y"))
# Description ------------------------------------------------------------------
# R script to process uploaded raw data into a tidy, analysis-ready data frame
# Load packages ----------------------------------------------------------------
## Run the following code in console if you don't have the packages
## install.packages(c("usethis", "fs", "here", "readr", "readxl", "openxlsx"))
library(usethis)
library(fs)
library(here)
library(readr)
library(dplyr)
library(readxl)
library(openxlsx)
library(lubridate)
# Load Data --------------------------------------------------------------------
# Load the necessary data from a CSV file
data_in <- readr::read_csv("data-raw/SDG Household Level Survey (Malawi CJF).csv")
# Tidy data --------------------------------------------------------------------
# Remove rows where the 'latitude' column contains NULL (NA) values
data_in <- data_in %>%
filter(!is.na(latitude))
# Function to check for non-UTF-8 characters in character columns
check_utf8 <- function(df) {
# Identify columns with invalid UTF-8 characters
invalid_cols <- sapply(df, function(column) {
if (!is.character(column)) return(FALSE) # Skip non-character columns
any(sapply(column, function(x) {
if (is.na(x)) return(FALSE) # Ignore NA values
!identical(iconv(x, from = "UTF-8", to = "UTF-8"), x)
}))
})
# Extract the column names with invalid characters
bad_cols <- names(df)[invalid_cols]
# Output a message depending on whether non-UTF-8 characters were found
if (length(bad_cols) > 0) {
message("Non-UTF-8 characters detected in columns: ",
paste(bad_cols, collapse = ", "))
} else {
message("No non-UTF-8 characters found.")
}
}
# Check the data for non-UTF-8 characters before conversion
check_utf8(data_in)
# Convert character columns from Latin1 encoding to UTF-8, removing problematic
#   characters
data_in[] <- lapply(data_in, function(x) {
if (is.character(x)) {
# Convert to UTF-8 and remove problematic characters
iconv(x, from = "latin1", to = "UTF-8", sub = "")
} else {
x
}
})
# Re-check the data for non-UTF-8 characters after the conversion
check_utf8(data_in)
# Convert 'date_submitted' column to Date type (assuming it's in m/d/y format)
data_in <- data_in %>%
mutate(date_submitted = mdy_hm(date_submitted),
date_submitted = as.Date(date_submitted))
# Reformat the date to d/m/y format (character format)
data_in <- data_in %>%
mutate(date_submitted = format(date_submitted, "%d/%m/%Y"))
# Assign data to a variable
sdghhsurveymw <- data_in
# Export Data ------------------------------------------------------------------
usethis::use_data(sdghhsurveymw, overwrite = TRUE)
fs::dir_create(here::here("inst", "extdata"))
readr::write_csv(sdghhsurveymw,
here::here("inst", "extdata", paste0("sdghhsurveymw", ".csv")))
openxlsx::write.xlsx(sdghhsurveymw,
here::here("inst", "extdata", paste0("sdghhsurveymw",
".xlsx")))
setup_dictionary()
setup_roxygen()
devtools::document()
devtools::check()
devtools::install()
use_author(
given = "Emmanuel",
family = "Mhango",
role = c("aut", "cre"),
email = "emmanuellmhango@gmail.com",
comment = c(ORCID = "0000-0003-3197-6244")
)
use_author(given = "Donald", family = "Robertson", role = "aut")
use_author(given = "Chifundo", family = "Mandala", role = "aut")
use_author(
given = "Emmanuel",
family = "Mhango",
role = c("aut", "cre"),
email = "emmanuellmhango@gmail.com",
comment = c(ORCID = "0000-0003-3197-6244")
)
use_author(given = "M", family = "Nzengo", role = "aut")
use_author(given = "Muthi", family = "Nhlema", role = "aut")
use_author(given = "M.", family = "Banda", role = "aut")
use_author(given = "Khumbo", family = "Zinyongo", role = "aut")
use_author(given = "Christian", family = "Nedi", role = "aut")
use_author(given = "Leman", family = "Ngwena", role = "aut")
use_author(given = "M", family = "Kazembe", role = "aut")
use_author(given = "Yankho", family = "Mthindi", role = "aut")
use_author(given = "E.", family = "Mofolo", role = "aut")
use_author(given = "Jeffrey", family = "Bauleni", role = "aut")
use_author(given = "Khallen", family = "Malliot", role = "aut")
use_author(given = "Thandi", family = "Mtemangombe", role = "aut")
use_author(given = "Tamandani", family = "Tembo", role = "aut")
use_author(given = "Samuel", family = "Mlenga", role = "aut")
use_author(given = "Dufter", family = "Joshua", role = "aut")
use_author(given = "Andrew", family = "Mthunzi", role = "aut")
use_author(given = "Martha", family = "Kafuwa", role = "aut")
use_author(given = "Takondwa", family = "Tembo", role = "aut")
use_author(given = "Peter", family = "Singogo", role = "aut")
use_author(given = "Goodwin", family = "Mkandawire", role = "aut")
use_author(given = "Monica", family = "Msiska", role = "aut")
use_author(given = "Lemekezani", family = "Chilora", role = "aut")
use_author(given = "Tendai", family = "Jambo", role = "aut")
use_author(given = "William", family = "Kanyinji", role = "aut")
use_author(given = "Chikondi", family = "Kanyinji", role = "aut")
use_author(given = "Madalitso", family = "Kamamkhudza", role = "aut")
use_author(given = "Sylvia", family = "Siliya", role = "aut")
use_author(given = "Edward", family = "K Gadi", role = "aut")
use_author(given = "Buli", family = "Echika", role = "aut")
use_author(given = "Sunganani", family = "Monjeza", role = "aut")
use_author(given = "Derick", family = "Macheke", role = "aut")
use_author(given = "Fatsani", family = "Chinawa", role = "aut")
use_author(given = "Jonathan", family = "Sunthika", role = "aut")
use_author(given = "Precious", family = "Phiri", role = "aut")
use_author(given = "Bright", family = "Mphero", role = "aut")
use_author(given = "Rodney", family = "Kananji", role = "aut")
update_description()
devtools::document()
devtools::check()
devtools::install()
setup_readme()
use_ctbhor(given = "M", family = "Nzengo", role = "ctb")
use_author(given = "M", family = "Nzengo", role = "ctb")
use_author(given = "Muthi", family = "Nhlema", role = "ctb")
# Clean and prepare data
toilet_data <- sdghhsurveymw %>%
filter(!is.na(toilet_type) & toilet_type != "") %>%
count(toilet_type, sort = TRUE)
# Plot
ggplot(toilet_data, aes(x = reorder(toilet_type, n), y = n)) +
geom_bar(stat = "identity", fill = "#2C7BB6") +
coord_flip() +
labs(
title = "Distribution of Toilet Types in Surveyed Households",
x = "Toilet Type",
y = "Number of Households"
) +
theme_minimal(base_size = 13)
library(ggplot2)
# Clean and prepare data
toilet_data <- sdghhsurveymw %>%
filter(!is.na(toilet_type) & toilet_type != "") %>%
count(toilet_type, sort = TRUE)
# Plot
ggplot(toilet_data, aes(x = reorder(toilet_type, n), y = n)) +
geom_bar(stat = "identity", fill = "#2C7BB6") +
coord_flip() +
labs(
title = "Distribution of Toilet Types in Surveyed Households",
x = "Toilet Type",
y = "Number of Households"
) +
theme_minimal(base_size = 13)
toilet_data <- sdghhsurveymw %>%
filter(!is.na(toilet_type) & toilet_type != "") %>%
count(toilet_type, sort = TRUE)
# Plot
ggplot(toilet_data, aes(x = reorder(toilet_type, n), y = n)) +
geom_bar(stat = "identity", fill = "#2C7BB6") +
coord_flip() +
labs(
title = "Distribution of Toilet Types in Surveyed Households",
x = "Toilet Type",
y = "Number of Households"
) +
theme_minimal(base_size = 13)
library(sdghhsurveymw)
devtools::build_readme()
devtools::build_readme()
devtools::build_readme()
